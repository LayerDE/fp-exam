ex1:
    Cards.hs:
        edit:
            instance Pretty Rank
            instance Pretty Suit
        add:
            rankMap :: Rank -> String 
            suitMap :: Suit -> String
            instance Pretty Char
    Gameplay.hs:
        edit:
            playInteractive :: PlayerStrategy

ex2:
    Game.hs:
        remove:
            computeNextPlayer :: PlayerName -> [PlayerName] -> PlayerNa
            playerProcessGameEvent :: PlayerName -> GameEvent -> PlayerState -> PlayerState
    Gameplay.hs:
        remove:
            import qualified Control.Monad.Writer (WriterT)
            import Control.Monad.State.Lazy (State, StateT)
            import Control.Monad as Monad
            import Debug.Trace (trace, traceShowId, traceIO, traceM)
            data PlayerEventProcessor
            playAlongProcessEventM :: (MonadState PlayerState m, PlayerInterface m) => PlayerName -> GameEvent -> m ()
            playAlongPlayer :: PlayerName -> PlayerState -> Player
            playAlongCard' :: (HasPlayerState m, MonadIO m) => m Card

ex3:
    Cards.hs:
        edit:
            instance Penalty a => Penalty (Set a)

ex4:
    Gameplay.hs:
        edit:
            announceEvent :: ControllerInterface m => GameEvent -> m ()

ex5:
    Gameplay.hs:
        edit:
            announceEvent :: ControllerInterface m => GameEvent -> m ()

ex6:
    Gameplay.hs:
        edit:
            playInteractive :: PlayerStrategy
    Game.hs:
        add:
            legalCardFilter :: (Hand, Trick) -> Card -> Bool

ex7:
